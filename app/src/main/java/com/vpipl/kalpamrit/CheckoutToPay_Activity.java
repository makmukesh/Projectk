package com.vpipl.kalpamrit;import android.Manifest;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.app.AppCompatDelegate;import android.support.v7.widget.Toolbar;import android.telephony.TelephonyManager;import android.text.Html;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;import com.vpipl.kalpamrit.Adapters.CheckoutToPay_Adapter;import com.vpipl.kalpamrit.Utils.AppUtils;import com.vpipl.kalpamrit.Utils.QueryUtils;import com.vpipl.kalpamrit.Utils.SPUtils;import com.vpipl.kalpamrit.model.ProductsList;import org.apache.commons.lang3.text.WordUtils;import org.apache.http.NameValuePair;import org.apache.http.message.BasicNameValuePair;import org.json.JSONArray;import org.json.JSONObject;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * Created by PC14 on 08-Apr-16. */public class CheckoutToPay_Activity extends AppCompatActivity {    public static ArrayList<HashMap<String, String>> deliveryAddressList = new ArrayList<>();    public static String addressListPosition = "0";    private static String TAG = "CheckoutToPay_Activity";    private FrameLayout layout_cartProductList;    private LinearLayout layout_noData;    private ListView list_cartProducts;    private TextView txt_addressChange;    private TextView txt_name;    private TextView txt_address;    private TextView txt_mobNo;    private TextView txt_totalItems;    private TextView txt_subTotalAmount;    private TextView txt_deliveryCharge;    private TextView txt_TotalAmount;    private TextView txt_TDR;    private TextView txt_round_off;    private TextView txt_netpayable;    private TextView txt_totalBV;    private TextView txt_product_wallet_balance;    private TextView txt_normal_wallet_balance;    private LinearLayout LLtotalBV;    private Button btn_startShopping;    private Button btn_payNow;    private CheckoutToPay_Adapter adapter;    private ViewGroup addressHeaderView = null;    private ViewGroup addressFooterView = null;    RadioGroup rg_paymode;    RadioButton rb_online, rb_paytm ,rb_product_wallet,rb_normal_wallet;    String str_paymode = "O";    ImageView img_menu;    String str_product_wallet_balance = "0" ;    String str_normal_wallet_balance = "0" ;    ImageView img_cart;    ImageView img_user;    String ComesFrom = "Other";    int weightslab = 2;    int weightCharge = 52;    public void SetupToolbar() {        img_menu = findViewById(R.id.img_nav_back);        img_cart = findViewById(R.id.img_cart);        img_user = findViewById(R.id.img_login_logout);        img_cart.setVisibility(View.GONE);        img_menu.setImageResource(R.drawable.icon_nav_bar_close);        img_menu.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        img_user.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!AppController.getSpIsLogin().getBoolean(SPUtils.IS_LOGIN, false))                    startActivity(new Intent(CheckoutToPay_Activity.this, Login_Activity.class));                else                    AppUtils.showDialogSignOut(CheckoutToPay_Activity.this);            }        });        if (AppController.getSpIsLogin().getBoolean(SPUtils.IS_LOGIN, false))            img_user.setImageDrawable(getResources().getDrawable(R.drawable.icon_logout_orange));        else            img_user.setImageDrawable(getResources().getDrawable(R.drawable.icon_distributor_login_orange));    }    private String calculateSelectedProductSubTotalAmount() {        double amount = 0.0d;        try {            for (int i = 0; i < AppController.selectedProductsList.size(); i++) {                double countAmount;                countAmount = ((Double.parseDouble(AppController.selectedProductsList.get(i).getNewDP())) * (Double.parseDouble(AppController.selectedProductsList.get(i).getQty())));                amount = amount + countAmount;            }        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateSelectedProductTotalBVAmount() {        double amount = 0.0d;        try {            for (int i = 0; i < AppController.selectedProductsList.size(); i++) {                double countAmount;                countAmount = ((Double.parseDouble(AppController.selectedProductsList.get(i).getBV())) * (Double.parseDouble(AppController.selectedProductsList.get(i).getQty())));                amount = amount + countAmount;            }        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateSelectedProductTotalWeight() {        double amount = 0.0d;        try {            for (int i = 0; i < AppController.selectedProductsList.size(); i++) {                double countAmount;                countAmount = ((Double.parseDouble(AppController.selectedProductsList.get(i).getWeight())) * (Double.parseDouble(AppController.selectedProductsList.get(i).getQty())));                amount = amount + countAmount;            }        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateSelectedProductTotalShipCharge() {        double amount = 0.0d;        try {            if (Double.parseDouble(calculateSelectedProductSubTotalAmount()) < 1100) {                double weight = 0;                for (int i = 0; i < AppController.selectedProductsList.size(); i++) {                    double countAmount;                    countAmount = ((Double.parseDouble(AppController.selectedProductsList.get(i).getWeight())) * (Double.parseDouble(AppController.selectedProductsList.get(i).getQty())));                    weight = weight + countAmount;                }                if (weight > 0) {                    weight = weight / 1000;                    int multiplier = (int) weight / weightslab;                    double reminder = 0;                    if ((weight % 2) > 0)                        reminder = weightCharge;                    amount = (multiplier * weightCharge) + reminder;                } else                    amount = weightCharge;            }        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateSelectedProductTotalAmount() {        double amount = 0.0d;        try {            amount = (Double.parseDouble(calculateSelectedProductSubTotalAmount()) + Double.parseDouble(calculateSelectedProductTotalShipCharge()));        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateTDRAmount() {        double amount = 0.0d;        try {            String Usertype = (AppController.getSpUserInfo().getString(SPUtils.USER_TYPE, ""));            if (Usertype.equalsIgnoreCase("DISTRIBUTOR"))                amount = 0.0d;            else {                amount = (Double.parseDouble(calculateSelectedProductTotalAmount()));                if (amount > 0) {                    amount = (amount * 2) / 100;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return (amount) + "";    }    private String calculateRoundoffAmount() {        String rndoff = "";        try {            DecimalFormat df2 = new DecimalFormat("#.##");            double final_amount = Double.parseDouble(calculateSelectedProductTotalAmount()) + Double.parseDouble(calculateTDRAmount());            String formated_amount = String.format("%.0f", final_amount);            rndoff = "" + String.format("%.2f", (final_amount - Double.parseDouble(formated_amount)));            if (final_amount > Double.parseDouble(formated_amount))                rndoff = "-" + rndoff;        } catch (Exception e) {            e.printStackTrace();        }        return rndoff;    }    private String calculateNetPayableAmount() {        double amount = 0.0d;        try {            amount = (Double.parseDouble(calculateSelectedProductTotalAmount()) + Double.parseDouble(calculateTDRAmount())) + Double.parseDouble(calculateRoundoffAmount());        } catch (Exception e) {            e.printStackTrace();        }        return "" + (int) amount;    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.checkouttopay_activity);        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setTitle("");        SetupToolbar();        if (getIntent().getExtras() != null) {            ComesFrom = getIntent().getStringExtra("COMESFROM");        }        try {            layout_cartProductList = findViewById(R.id.layout_cartProductList);            layout_noData = findViewById(R.id.layout_noData);            list_cartProducts = findViewById(R.id.list_cartProducts);            btn_payNow = findViewById(R.id.btn_payNow);            btn_startShopping = findViewById(R.id.btn_startShopping);            btn_startShopping.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    finish();                    Intent intent = new Intent(CheckoutToPay_Activity.this, Home_Activity.class);                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(intent);                }            });            btn_payNow.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                   /* if (rg_paymode.getCheckedRadioButtonId() == -1) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Select Pay Mode");                    } else {                        showPaymentConfirmationDialog();                    }*/                    /*start Code added by mukesh 10-09-2019 05:40PM --  Blank address,state,city,district,mobile no,  can't place order */                    if (AppController.selectedProductsList.get(0).getDeliveryAddress1().trim().replaceAll(",", " ").equalsIgnoreCase("")) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Fill Address in Delivery Address Before Order Placing");                    } else if (AppController.selectedProductsList.get(0).getDeliveryAddressMob().trim().replaceAll(",", " ").equalsIgnoreCase("")) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Fill Mobile No in Delivery Address Before Order Placing");                    } else if (AppController.selectedProductsList.get(0).getDeliveryAddressStateCode().trim().replaceAll(",", " ").equalsIgnoreCase("0")) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Fill State in Delivery Address Before Order Placing");                    } else if (AppController.selectedProductsList.get(0).getDeliveryAddressCity().trim().replaceAll(",", " ").equalsIgnoreCase("")) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Fill City in Delivery Address Before Order Placing");                    } else if (AppController.selectedProductsList.get(0).getDeliveryAddressPinCode().trim().replaceAll(",", " ").equalsIgnoreCase("")) {                        AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Fill Pincode in Delivery Address Before Order Placing");                    } else {                            executeToCheckPincode(AppController.selectedProductsList.get(0).getDeliveryAddressPinCode());                        /*End Code added by mukesh 10-09-2019 05:40PM --  Blank address,state,city,district,mobile no,  can't place order */                      /*  int selectedpaymode = rg_paymode.getCheckedRadioButtonId();                        RadioButton radioButtonTwo = (RadioButton) findViewById(selectedpaymode);                        String selected_paymode = radioButtonTwo.getText().toString().trim();                        String str_full_paymode = "Online Payment";                        if (selected_paymode.equalsIgnoreCase("Online Payment")) {                            str_paymode = "OP";                            str_full_paymode = "Online Payment";                        } else if (selected_paymode.equalsIgnoreCase("Paytm Payment")) {                            str_paymode = "PP";                            str_full_paymode = "Paytm Payment";                        }                        if (rg_paymode.getCheckedRadioButtonId() == -1) {                            AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Select Pay Mode");                        } else {                            if (str_paymode.equalsIgnoreCase("OP")) {                                showPaymentConfirmationDialog(str_full_paymode);                            } else {                                showPaymentConfirmationDialog(str_full_paymode);                            }                        }*/                    }                }            });            showEmptyCart();            executeToWeightConfig();        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void executeToWeightConfig() {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    protected void onPreExecute() {                        AppUtils.showProgressDialog(CheckoutToPay_Activity.this);                    }                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            List<NameValuePair> postParameters = new ArrayList<>();                            response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToWeightConfig, TAG);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            AppUtils.dismissProgressDialog();                            JSONObject jsonObject = new JSONObject(resultData);                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                executeToGetAddressesList();                                JSONArray jsonArrayData = jsonObject.getJSONArray("Data");                                if (jsonArrayData.length() > 0) {                                    try {                                        weightCharge = jsonArrayData.getJSONObject(0).getInt("WeightCharge");                                        weightslab = jsonArrayData.getJSONObject(0).getInt("WeightSlabKG");                                    } catch (Exception e) {                                        e.printStackTrace();                                    }                                }                            } else {                                AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            } else {                AppUtils.alertDialog(CheckoutToPay_Activity.this, getResources().getString(R.string.txt_networkAlert));            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void executeToGetAddressesList() {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    protected void onPreExecute() {                        AppUtils.showProgressDialog(CheckoutToPay_Activity.this);                    }                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            List<NameValuePair> postParameters = new ArrayList<>();                            postParameters.add(new BasicNameValuePair("FormNo", AppController.getSpUserInfo().getString(SPUtils.USER_FORM_NUMBER, "")));                            // UserType is by defailt D for Distributor                            if (AppController.getSpIsLogin().getBoolean(SPUtils.IS_LOGIN, false)) {                                String Usertype = (AppController.getSpUserInfo().getString(SPUtils.USER_TYPE, ""));                                if (Usertype.equalsIgnoreCase("CUSTOMER"))                                    postParameters.add(new BasicNameValuePair("UserType", "N"));                                else if (Usertype.equalsIgnoreCase("DISTRIBUTOR"))                                    postParameters.add(new BasicNameValuePair("UserType", "D"));                                else                                    postParameters.add(new BasicNameValuePair("UserType", "N"));                            } else                                postParameters.add(new BasicNameValuePair("UserType", "N"));                            response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToGetCheckOutDeliveryAddress, TAG);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            AppUtils.dismissProgressDialog();                            JSONObject jsonObject = new JSONObject(resultData);                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                JSONArray jsonArrayData = jsonObject.getJSONArray("Data");                                if (jsonArrayData.length() > 0) {                                    saveDeliveryAddressInfo(jsonArrayData);                                } else {                                    String msz = jsonObject.getString("Message");                                    if (msz.contains("No Address Found,Please Add New Address"))                                        ShowDialog(msz);                                    else                                        AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                                }                            } else {                                AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            } else {                AppUtils.alertDialog(CheckoutToPay_Activity.this, getResources().getString(R.string.txt_networkAlert));            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void saveDeliveryAddressInfo(JSONArray jsonArrayData) {        try {            deliveryAddressList.clear();            for (int i = 0; i < jsonArrayData.length(); i++) {                JSONObject jsonObject = jsonArrayData.getJSONObject(i);                HashMap<String, String> map = new HashMap<>();                map.put("ID", "" + jsonObject.getString("ID"));                map.put("MemFirstName", "" + jsonObject.getString("MemFirstName"));                map.put("MemLastName", "" + jsonObject.getString("MemLastName"));                map.put("Address1", "" + jsonObject.getString("Address1"));                map.put("Address2", "" + jsonObject.getString("Address2"));                map.put("CountryID", "" + jsonObject.getString("CountryID"));                map.put("CountryName", "" + jsonObject.getString("CountryName"));                map.put("StateCode", "" + jsonObject.getString("StateCode"));                map.put("StateName", "" + jsonObject.getString("StateName"));                map.put("District", "" + jsonObject.getString("District"));                map.put("City", "" + jsonObject.getString("City"));                map.put("PinCode", "" + jsonObject.getString("PinCode"));                map.put("Email", "" + jsonObject.getString("MailID"));                map.put("Mobl", "" + jsonObject.getString("Mobl"));                map.put("EntryType", "" + jsonObject.getString("EntryType"));                map.put("Address", "" + jsonObject.getString("Address").replace("&nbsp;", " "));                Log.e(TAG, "Address..." + jsonObject.getString("Address").replace("&nbsp;", " "));                deliveryAddressList.add(map);            }            if (AppController.selectedProductsList.size() > 0) {                setProductSelectedCartList();            } else {                showEmptyCart();            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void showEmptyCart() {        try {            layout_cartProductList.setVisibility(View.GONE);            list_cartProducts.setVisibility(View.GONE);            layout_noData.setVisibility(View.VISIBLE);        } catch (Exception e) {            e.printStackTrace();        }    }    private void setProductSelectedCartList() {        try {            if (AppController.selectedProductsList.size() > 0) {                if (deliveryAddressList.size() > 0) {                    layout_cartProductList.setVisibility(View.VISIBLE);                    list_cartProducts.setVisibility(View.VISIBLE);                    layout_noData.setVisibility(View.GONE);                    LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);                    addressHeaderView = (ViewGroup) inflater.inflate(R.layout.addcartlist_header, list_cartProducts, false);                    addressFooterView = (ViewGroup) inflater.inflate(R.layout.addcartlist_footer, list_cartProducts, false);                    setHeaderDetails();                    list_cartProducts.addHeaderView(addressHeaderView, null, false);                    list_cartProducts.addFooterView(addressFooterView, null, false);                    adapter = new CheckoutToPay_Adapter(CheckoutToPay_Activity.this);                    list_cartProducts.setAdapter(adapter);                } else {                    showEmptyCart();                }            } else {                showEmptyCart();            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void setHeaderDetails() {        try {            if (addressHeaderView != null) {                txt_addressChange = addressHeaderView.findViewById(R.id.txt_addressChange);                txt_addressChange.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View view) {                        startActivity(new Intent(CheckoutToPay_Activity.this, ChangeDeliveryAddress_Activity.class));                    }                });                txt_name = addressHeaderView.findViewById(R.id.txt_name);                txt_address = addressHeaderView.findViewById(R.id.txt_address);                txt_mobNo = addressHeaderView.findViewById(R.id.txt_mobNo);                txt_totalItems = addressFooterView.findViewById(R.id.txt_totalItems);                txt_subTotalAmount = addressFooterView.findViewById(R.id.txt_subTotalAmount);                txt_deliveryCharge = addressFooterView.findViewById(R.id.txt_deliveryCharge);                txt_TotalAmount = addressFooterView.findViewById(R.id.txt_TotalAmount);                txt_TDR = addressFooterView.findViewById(R.id.txt_TDR);                txt_round_off = addressFooterView.findViewById(R.id.txt_round_off);                txt_netpayable = addressFooterView.findViewById(R.id.txt_netpayable);                txt_totalBV = addressFooterView.findViewById(R.id.txt_totalBV);                txt_product_wallet_balance = addressFooterView.findViewById(R.id.txt_product_wallet_balance);                txt_normal_wallet_balance = addressFooterView.findViewById(R.id.txt_normal_wallet_balance);                LLtotalBV = addressFooterView.findViewById(R.id.LLtotalBV);                rg_paymode = (RadioGroup) addressFooterView.findViewById(R.id.rg_paymode);                rb_online = (RadioButton) addressFooterView.findViewById(R.id.rb_online);                rb_paytm = (RadioButton) addressFooterView.findViewById(R.id.rb_paytm);                rb_product_wallet = (RadioButton) addressFooterView.findViewById(R.id.rb_product_wallet);                rb_normal_wallet = (RadioButton) addressFooterView.findViewById(R.id.rb_normal_wallet);                txt_totalItems.setText(Html.fromHtml("(" + AppController.selectedProductsList.size() + ")"));                txt_subTotalAmount.setText("₹ " + Html.fromHtml(calculateSelectedProductSubTotalAmount()));                txt_deliveryCharge.setText("₹ " + Html.fromHtml(calculateSelectedProductTotalShipCharge()));                txt_TotalAmount.setText("₹ " + Html.fromHtml(calculateSelectedProductTotalAmount()));                txt_TDR.setText("₹ " + Html.fromHtml(calculateTDRAmount()));                txt_round_off.setText("₹ " + Html.fromHtml(calculateRoundoffAmount()));                txt_netpayable.setText("₹ " + Html.fromHtml(calculateNetPayableAmount()));              //  executeProductWalletBalanceRequest();                executeNormalWalletBalanceRequest();                String Usertype = (AppController.getSpUserInfo().getString(SPUtils.USER_TYPE, ""));                if (Usertype.equalsIgnoreCase("DISTRIBUTOR")) {                    txt_totalBV.setText(Html.fromHtml(calculateSelectedProductTotalBVAmount()));                    LLtotalBV.setVisibility(View.VISIBLE);                } else                    LLtotalBV.setVisibility(View.GONE);                setAddressValue(0);            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void setAddressValue(int position) {        try {            if (deliveryAddressList.size() > 0) {                txt_name.setText(WordUtils.capitalizeFully(deliveryAddressList.get(position).get("MemFirstName")));                txt_address.setText((WordUtils.capitalizeFully(Html.fromHtml(deliveryAddressList.get(position).get("Address")).toString().trim() + " Mobile : " + deliveryAddressList.get(position).get("Mobl"))).replaceAll(",", " "));//              txt_mobNo.setText("M : "+ deliveryAddressList.get(position).get("Mobl"));                if (AppController.selectedProductsList.size() > 0) {                    ProductsList selectedProduct = new ProductsList();                    selectedProduct.setID("" + AppController.selectedProductsList.get(0).getID());                    selectedProduct.setProductType("" + AppController.selectedProductsList.get(0).getProductType());                    selectedProduct.setcode("" + AppController.selectedProductsList.get(0).getcode());                    selectedProduct.setUID("" + AppController.selectedProductsList.get(0).getUID());                    selectedProduct.setName("" + AppController.selectedProductsList.get(0).getName());                    selectedProduct.setWeight("" + AppController.selectedProductsList.get(0).getWeight());                    selectedProduct.setImagePath("" + AppController.selectedProductsList.get(0).getImagePath());                    selectedProduct.setNewMRP("" + AppController.selectedProductsList.get(0).getNewMRP());                    selectedProduct.setNewDP("" + AppController.selectedProductsList.get(0).getNewDP());                    selectedProduct.setBV("" + AppController.selectedProductsList.get(0).getBV());                    selectedProduct.setDescription("" + AppController.selectedProductsList.get(0).getDescription());                    selectedProduct.setDetail("" + AppController.selectedProductsList.get(0).getDetail());                    selectedProduct.setKeyFeature("" + AppController.selectedProductsList.get(0).getKeyFeature());                    selectedProduct.setDiscount("" + AppController.selectedProductsList.get(0).getDiscount());                    selectedProduct.setDiscountPer("" + AppController.selectedProductsList.get(0).getDiscountPer());                    selectedProduct.setIsshipChrg("" + AppController.selectedProductsList.get(0).getIsshipChrg());                    selectedProduct.setShipCharge("" + AppController.selectedProductsList.get(0).getShipCharge());                    selectedProduct.setCatID("" + AppController.selectedProductsList.get(0).getCatID());                    selectedProduct.setRandomNo("" + AppController.selectedProductsList.get(0).getRandomNo());                    selectedProduct.setQty("" + AppController.selectedProductsList.get(0).getQty());                    selectedProduct.setBaseQty("" + AppController.selectedProductsList.get(0).getBaseQty());                    selectedProduct.setAvailFor("" + AppController.selectedProductsList.get(0).getAvailFor());                    selectedProduct.setOrderFor("" + AppController.selectedProductsList.get(0).getOrderFor());                    selectedProduct.setParentProductID("" + AppController.selectedProductsList.get(0).getParentProductID());                    selectedProduct.setsellerCode("" + AppController.selectedProductsList.get(0).getsellerCode());                    selectedProduct.setIsDisplayDiscount(AppController.selectedProductsList.get(0).getIsDisplayDiscount());                    selectedProduct.setselectedSizeId("" + AppController.selectedProductsList.get(0).getselectedSizeId());                    selectedProduct.setselectedSizeName("" + AppController.selectedProductsList.get(0).getselectedSizeName());                    selectedProduct.setselectedColorId("" + AppController.selectedProductsList.get(0).getselectedColorId());                    selectedProduct.setselectedColorName("" + AppController.selectedProductsList.get(0).getselectedColorName());                    selectedProduct.setDeliveryAddressID("" + deliveryAddressList.get(position).get("ID"));                    selectedProduct.setDeliveryAddressFirstName("" + deliveryAddressList.get(position).get("MemFirstName"));                    selectedProduct.setDeliveryAddressLastName("" + deliveryAddressList.get(position).get("MemLastName"));                    selectedProduct.setDeliveryAddress("" + deliveryAddressList.get(position).get("Address"));                    selectedProduct.setDeliveryAddress1("" + deliveryAddressList.get(position).get("Address1"));                    selectedProduct.setDeliveryAddress2("" + deliveryAddressList.get(position).get("Address2"));                    selectedProduct.setDeliveryAddressCountryID("" + deliveryAddressList.get(position).get("CountryID"));                    selectedProduct.setDeliveryAddressCountryName("" + deliveryAddressList.get(position).get("CountryName"));                    selectedProduct.setDeliveryAddressStateCode("" + deliveryAddressList.get(position).get("StateCode"));                    selectedProduct.setDeliveryAddressStateName("" + deliveryAddressList.get(position).get("StateName"));                    selectedProduct.setDeliveryAddressDistrict("" + deliveryAddressList.get(position).get("District"));                    selectedProduct.setDeliveryAddressCity("" + deliveryAddressList.get(position).get("City"));                    selectedProduct.setDeliveryAddressPinCode("" + deliveryAddressList.get(position).get("PinCode"));                    selectedProduct.setDeliveryAddressEmail("" + deliveryAddressList.get(position).get("Email"));                    selectedProduct.setDeliveryAddressMob("" + deliveryAddressList.get(position).get("Mobl"));                    selectedProduct.setDeliveryAddressEntryType("" + deliveryAddressList.get(position).get("EntryType"));                    AppController.selectedProductsList.set(0, selectedProduct);                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    protected void onRestart() {        super.onRestart();        try {            if (adapter != null) {                setAddressValue(Integer.parseInt(CheckoutToPay_Activity.addressListPosition));                adapter.notifyDataSetChanged();                setOptionMenu();            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    protected void onDestroy() {        super.onDestroy();        try {            AppUtils.dismissProgressDialog();        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void setOptionMenu() {        try {            if (AppController.getSpIsLogin().getBoolean(SPUtils.IS_LOGIN, false))                img_user.setImageDrawable(getResources().getDrawable(R.drawable.icon_logout_orange));            else                img_user.setImageDrawable(getResources().getDrawable(R.drawable.icon_distributor_login_orange));        } catch (Exception e) {            e.printStackTrace();        }    }    private void ShowDialog(String message) {        final Dialog dialog = AppUtils.createDialog(CheckoutToPay_Activity.this, true);        TextView dialog4all_txt = dialog.findViewById(R.id.txt_DialogTitle);        dialog4all_txt.setText(message);        TextView textView = dialog.findViewById(R.id.txt_submit);        textView.setText("Add New Address");        textView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();                Intent intent = new Intent(CheckoutToPay_Activity.this, AddDeliveryAddress_Activity.class);                intent.putExtra("ComesFrom", "CheckoutToPay_Activity");                startActivity(intent);            }        });        dialog.show();    }    public void showPaymentConfirmationDialog(String s_str_full_paymode) {        try {            final Dialog dialog = AppUtils.createDialog(this, false);            dialog.setCancelable(false);            TextView txt_DialogTitle = (TextView) dialog.findViewById(R.id.txt_DialogTitle);            //txt_DialogTitle.setText(Html.fromHtml("Are you confirm to place an Order of " + txt_netpayable.getText().toString() + " through " + "Online Payment" + ". Please click on Confirm to proceed ahead."));            txt_DialogTitle.setText(Html.fromHtml("Are you confirm to place an Order of " + txt_netpayable.getText().toString() + " through " + s_str_full_paymode + ". Please click on Confirm to proceed ahead."));            TextView txt_submit = (TextView) dialog.findViewById(R.id.txt_submit);            txt_submit.setText("Confirm");            txt_submit.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try {                        dialog.dismiss();                        startPaymentRequest();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            });            TextView txt_cancel = (TextView) dialog.findViewById(R.id.txt_cancel);            txt_cancel.setText("Cancel");            txt_cancel.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try {                        dialog.dismiss();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            });            dialog.show();        } catch (Exception e) {            e.printStackTrace();        }    }    private void startPaymentRequest() {        try {            List<NameValuePair> postParameters = new ArrayList<>();            JSONArray jsonArrayOrder = new JSONArray();            JSONArray jsonArrayOrderDetail = new JSONArray();            JSONObject jsonObjectOrder = new JSONObject();            jsonObjectOrder.put("MemFirstName", AppController.selectedProductsList.get(0).getDeliveryAddressFirstName().trim());            jsonObjectOrder.put("MemLasttName", AppController.selectedProductsList.get(0).getDeliveryAddressLastName().trim());            jsonObjectOrder.put("Address1", AppController.selectedProductsList.get(0).getDeliveryAddress1().trim().replaceAll(",", " "));            jsonObjectOrder.put("Address2", "");            jsonObjectOrder.put("StateID", AppController.selectedProductsList.get(0).getDeliveryAddressStateCode().trim().replaceAll(",", " "));            jsonObjectOrder.put("StateName", AppController.selectedProductsList.get(0).getDeliveryAddressStateName().trim().replaceAll(",", " "));            jsonObjectOrder.put("District", AppController.selectedProductsList.get(0).getDeliveryAddressDistrict().trim().replaceAll(",", " "));            String Usertype = (AppController.getSpUserInfo().getString(SPUtils.USER_TYPE, ""));            if (Usertype.equalsIgnoreCase("DISTRIBUTOR")) {                jsonObjectOrder.put("UserType", "D");                jsonObjectOrder.put("IDType", "D");            } else {                jsonObjectOrder.put("UserType", "N");                jsonObjectOrder.put("IDType", "G");            }            jsonObjectOrder.put("PayMode", "" + str_paymode);            jsonObjectOrder.put("Remarks", "");            jsonObjectOrder.put("ChDDNo", "0");            jsonObjectOrder.put("ChDate", "");            jsonObjectOrder.put("BankName", "");            jsonObjectOrder.put("BranchName", "");            jsonObjectOrder.put("TotalDP", calculateSelectedProductSubTotalAmount().trim().replace(",", " "));            jsonObjectOrder.put("Item", "" + AppController.selectedProductsList.size());            jsonObjectOrder.put("TotalQty", calculateSelectedProductTotalQty().trim().replace(",", " "));            TelephonyManager telephonyManager = ((TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE));            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {                // TODO: Consider calling                //    ActivityCompat#requestPermissions                // here to request the missing permissions, and then overriding                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,                //                                          int[] grantResults)                // to handle the case where the user grants the permission. See the documentation                // for ActivityCompat#requestPermissions for more details.                return;            }            String deviceId = telephonyManager.getDeviceId() + "";            jsonObjectOrder.put("HostIp", deviceId.trim().replace(",", " "));            jsonObjectOrder.put("ShippingCharge", "" + calculateSelectedProductTotalShipCharge().trim().replaceAll(",", " "));            jsonObjectOrder.put("color", AppController.selectedProductsList.get(0).getselectedColorName().trim().replace(",", " "));            jsonObjectOrder.put("Size", AppController.selectedProductsList.get(0).getselectedSizeName().trim().replace(",", " "));            jsonObjectOrder.put("Pack", "0");            jsonObjectOrder.put("Packing", "" + calculateSelectedProductTotalWeight());            jsonObjectOrder.put("OrderFor", AppController.selectedProductsList.get(0).getOrderFor().trim().replace(",", " "));            jsonObjectOrder.put("City", AppController.selectedProductsList.get(0).getDeliveryAddressCity().trim().replace(",", " "));            jsonObjectOrder.put("PinCode", AppController.selectedProductsList.get(0).getDeliveryAddressPinCode().trim().replace(",", " "));            jsonObjectOrder.put("MobileNo", AppController.selectedProductsList.get(0).getDeliveryAddressMob().trim().replace(",", " "));            jsonObjectOrder.put("Email", AppController.selectedProductsList.get(0).getDeliveryAddressEmail().trim().replace(",", " "));            jsonObjectOrder.put("FormNo", AppController.getSpUserInfo().getString(SPUtils.USER_FORM_NUMBER, "").trim().replace(",", " "));            jsonObjectOrder.put("TotalBV", calculateSelectedProductTotalBVAmount().trim().replace(",", " "));            jsonObjectOrder.put("IDNo", AppController.getSpUserInfo().getString(SPUtils.USER_ID_NUMBER, "").trim().replace(",", " "));            jsonObjectOrder.put("ShipCharge", "" + calculateSelectedProductTotalShipCharge().trim().replaceAll(",", " "));            jsonObjectOrder.put("AmountBeforeTDR", "" + calculateSelectedProductTotalAmount().trim().replaceAll(",", " "));            jsonObjectOrder.put("TDRAmount", "" + calculateTDRAmount().trim().replaceAll(",", " "));            jsonObjectOrder.put("RndOff", "" + calculateRoundoffAmount().trim().replaceAll("-", ""));            jsonArrayOrder.put(jsonObjectOrder);            for (int j = 0; j < AppController.selectedProductsList.size(); j++) {                JSONObject jsonObjectDetail = new JSONObject();                jsonObjectDetail.put("Productid", AppController.selectedProductsList.get(j).getID().trim().replace(",", " "));                //TODO Weight                jsonObjectDetail.put("ProductName", AppController.selectedProductsList.get(j).getName().trim().replace(",", " "));                jsonObjectDetail.put("Qty", AppController.selectedProductsList.get(j).getQty().trim().replace(",", " "));                jsonObjectDetail.put("DP", AppController.selectedProductsList.get(j).getNewDP().trim().replace(",", " "));                jsonObjectDetail.put("Price", AppController.selectedProductsList.get(j).getNewMRP().trim().replace(",", " "));                double SubTotal = 0.0d;                SubTotal = ((Double.parseDouble(AppController.selectedProductsList.get(j).getNewDP())) * (Double.parseDouble(AppController.selectedProductsList.get(j).getQty())));                jsonObjectDetail.put("SubTotal", "" + (SubTotal));                jsonObjectDetail.put("colorDetails", AppController.selectedProductsList.get(j).getselectedColorName().trim().replace(",", " "));                jsonObjectDetail.put("SizeDetails", "" + AppController.selectedProductsList.get(j).getselectedSizeName().trim().replace(",", " "));                jsonObjectDetail.put("PackDetails", "0");                jsonObjectDetail.put("PackingDetails", AppController.selectedProductsList.get(j).getWeight().trim().replace(",", " "));                jsonObjectDetail.put("OrderForDetails", "" + AppController.selectedProductsList.get(j).getOrderFor().trim().replace(",", " "));                jsonObjectDetail.put("ShipChargeDetails", "" + AppController.selectedProductsList.get(j).getShipCharge().trim().replace(",", " "));                jsonObjectDetail.put("ImageUrl", "" + AppController.selectedProductsList.get(j).getImagePath().trim().replace(",", " ").replace("\\", ""));                jsonObjectDetail.put("BV", "" + AppController.selectedProductsList.get(j).getBV().trim().replace(",", " ").replace("\\", ""));                jsonObjectDetail.put("UID", "" + AppController.selectedProductsList.get(j).getUID().trim().replace(",", " ").replace("\\", ""));                jsonObjectDetail.put("IsKit", "0");                jsonObjectDetail.put("ProdType", "" + AppController.selectedProductsList.get(j).getProductType().trim().replace(",", " ").replace("\\", ""));                jsonObjectDetail.put("DiscountPer", "" + AppController.selectedProductsList.get(j).getDiscountPer().trim().replace(",", " ").replace("\\", ""));                jsonArrayOrderDetail.put(jsonObjectDetail);            }            postParameters.add(new BasicNameValuePair("Order", jsonArrayOrder.toString()));            postParameters.add(new BasicNameValuePair("OrderDetails", "" + jsonArrayOrderDetail.toString()));            //G for Customer and I for Distributor            if (Usertype.equalsIgnoreCase("DISTRIBUTOR")) {                postParameters.add(new BasicNameValuePair("OrderType", "I"));            } else {                postParameters.add(new BasicNameValuePair("OrderType", "G"));            }            if (ComesFrom.equalsIgnoreCase("REGISTER")) {                postParameters.add(new BasicNameValuePair("JoinStatus", "Y"));            } else {                postParameters.add(new BasicNameValuePair("JoinStatus", "N"));            }//            if(selectedModePosition==1)//            {//                postParameters.add(new BasicNameValuePair("LoginIDNo", AppController.getSpUserInfo().getString(SPUtils.USER_ID_NUMBER, "")));//                postParameters.add(new BasicNameValuePair("LoginFormNo", AppController.getSpUserInfo().getString(SPUtils.USER_FORM_NUMBER, "")));//                postParameters.add(new BasicNameValuePair("PayWalletAmount", calculateSelectedProductTotalAmount()));//                postParameters.add(new BasicNameValuePair("OrderAmount", calculateSelectedProductTotalAmount()));//                postParameters.add(new BasicNameValuePair("LoginUserName",  AppController.getSpUserInfo().getString(SPUtils.USER_FIRST_NAME, "")));//            }            executeToMakeOrderPaymentRequest(postParameters);//              startActivity(new Intent(CheckoutToPay_Activity.this, Payment_Activity.class));        } catch (Exception e) {            e.printStackTrace();        }    }    private void executeToMakeOrderPaymentRequest(final List<NameValuePair> postParameters) {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    protected void onPreExecute() {                        AppUtils.showProgressDialog(CheckoutToPay_Activity.this);                    }                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            if (str_paymode.equalsIgnoreCase("OP")) {                                response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToAddOrder_OnlinePayment, TAG);                            } else if (str_paymode.equalsIgnoreCase("PP")) {                                response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToAddOrder_OnlinePaymentPayTM, TAG);                            } else {                                response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToAddOrder_Wallet, TAG);                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            AppUtils.dismissProgressDialog();                            JSONObject jsonObject = new JSONObject(resultData);                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                if (str_paymode.equalsIgnoreCase("NW")) {                                    AppController.selectedProductsList.clear();                                    JSONArray jsonArrayOrderDetails = jsonObject.getJSONArray("OrderDetails");                                    JSONObject jsonObjectMainOrder = jsonArrayOrderDetails.getJSONObject(0);                                    startActivity(new Intent(CheckoutToPay_Activity.this, ThanksScreen_Activity.class).putExtra("ORDERNUMBER",jsonObjectMainOrder.getString("OrderNo")));                                    finish();                                } else {                                    String path = jsonObject.getString("Message");                                    path = path.replaceAll("\u0026", "&");                                    Log.e("PathURL", path);                                    String URL = path;                                    startActivity(new Intent(CheckoutToPay_Activity.this, Payment_Activity.class).putExtra("URL", URL));                                }                            } else {                                AppUtils.alertDialogWithFinish(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            } else {                AppUtils.alertDialog(CheckoutToPay_Activity.this, getResources().getString(R.string.txt_networkAlert));            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    public String calculateSelectedProductTotalQty() {        int qty = 0;        try {            for (int i = 0; i < AppController.selectedProductsList.size(); i++) {                qty = qty + (Integer.parseInt(AppController.selectedProductsList.get(i).getQty()));            }        } catch (Exception e) {            e.printStackTrace();        }        return qty + "";    }    /*Pincode check api integrate 24-10-2019 07:19 PM*/    private void executeToCheckPincode( final String pincode) {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    protected void onPreExecute() {                        AppUtils.showProgressDialog(CheckoutToPay_Activity.this);                    }                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            List<NameValuePair> postParameters = new ArrayList<>();                            postParameters.add(new BasicNameValuePair("Pincode", "" + pincode));                            response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this, postParameters, QueryUtils.methodToCheckPincode, TAG);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            AppUtils.dismissProgressDialog();                            JSONObject jsonObject = new JSONObject(resultData);                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                int selectedpaymode = rg_paymode.getCheckedRadioButtonId();                                RadioButton radioButtonTwo = (RadioButton) findViewById(selectedpaymode);                                String selected_paymode = radioButtonTwo.getText().toString().trim();                                String str_full_paymode = "Online Payment";                                if (selected_paymode.equalsIgnoreCase("Online Payment")) {                                    str_paymode = "OP";                                    str_full_paymode = "Online Payment";                                } else if (selected_paymode.equalsIgnoreCase("Paytm Payment")) {                                    str_paymode = "PP";                                    str_full_paymode = "Paytm Payment";                                } else if (selected_paymode.equalsIgnoreCase("Product Wallet")) {                                    str_paymode = "PW";                                    str_full_paymode = "Product Wallet";                                } else if (selected_paymode.equalsIgnoreCase("Normal Wallet")) {                                    str_paymode = "NW";                                    str_full_paymode = "Normal Wallet";                                }                                if (rg_paymode.getCheckedRadioButtonId() == -1) {                                    AppUtils.alertDialog(CheckoutToPay_Activity.this, "Please Select Pay Mode");                                } else {                                    if (str_paymode.equalsIgnoreCase("OP")) {                                        showPaymentConfirmationDialog(str_full_paymode);                                    } else if (str_paymode.equalsIgnoreCase("NW")) {                                        Double d_order_amt = Double.parseDouble(calculateSelectedProductTotalAmount().trim());                                        if(d_order_amt <= Double.parseDouble(str_normal_wallet_balance)){                                            showPaymentConfirmationDialog(str_full_paymode);                                        }                                        else {                                            AppUtils.alertDialog(CheckoutToPay_Activity.this, "Insufficient Normal Wallet Balance , Can't Place Order.");                                        }                                    } else {                                        showPaymentConfirmationDialog(str_full_paymode);                                    }                                }                            } else {                                AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            } else {                AppUtils.alertDialog(CheckoutToPay_Activity.this, getResources().getString(R.string.txt_networkAlert));            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void executeProductWalletBalanceRequest() {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            List<NameValuePair> postParameters = new ArrayList<>();                            postParameters.add(new BasicNameValuePair("Formno", AppController.getSpUserInfo().getString(SPUtils.USER_FORM_NUMBER, "")));                            response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this,                                    postParameters, QueryUtils.methodToProductWalletBalance , TAG);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            JSONObject jsonObject = new JSONObject(resultData);                            JSONArray jsonArrayData = jsonObject.getJSONArray("Data");                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                if (jsonObject.getString("Message").equalsIgnoreCase("Successfully.!")) {                                    str_product_wallet_balance = jsonArrayData.getJSONObject(0).getString("ProductWalletBal") ;                                    String count_text = "Available Product Wallet Balance ₹ : " + jsonArrayData.getJSONObject(0).getString("ProductWalletBal") ;                                   txt_product_wallet_balance.setText(count_text);                                } else {                                    str_product_wallet_balance = "0" ;                                    String count_text = "Available Product Wallet Balance ₹ : 0" ;                                    txt_product_wallet_balance.setText(count_text);                               //     AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                                }                            } else {                                AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                      //      AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            }        } catch (Exception e) {            e.printStackTrace();          //  AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }    private void executeNormalWalletBalanceRequest() {        try {            if (AppUtils.isNetworkAvailable(CheckoutToPay_Activity.this)) {                new AsyncTask<Void, Void, String>() {                    @Override                    protected String doInBackground(Void... params) {                        String response = "";                        try {                            List<NameValuePair> postParameters = new ArrayList<>();                            postParameters.add(new BasicNameValuePair("Formno", AppController.getSpUserInfo().getString(SPUtils.USER_FORM_NUMBER, "")));                            response = AppUtils.callWebServiceWithMultiParam(CheckoutToPay_Activity.this,                                    postParameters, QueryUtils.methodToGetWalletBalance , TAG);                        } catch (Exception e) {                            e.printStackTrace();                        }                        return response;                    }                    @Override                    protected void onPostExecute(String resultData) {                        try {                            JSONObject jsonObject = new JSONObject(resultData);                            JSONArray jsonArrayData = jsonObject.getJSONArray("Data");                            txt_normal_wallet_balance.setVisibility(View.VISIBLE);                            if (jsonObject.getString("Status").equalsIgnoreCase("True")) {                                if (jsonObject.getString("Message").equalsIgnoreCase("Successfully.!")) {                                    str_normal_wallet_balance = jsonArrayData.getJSONObject(0).getString("WBalance") ;                                    String count_text = "Available Normal Wallet Balance ₹ : " + jsonArrayData.getJSONObject(0).getString("WBalance") ;                                    txt_normal_wallet_balance.setText(count_text);                                } else {                                    str_normal_wallet_balance = "0" ;                                    String count_text = "Available Normal Wallet Balance ₹ : 0" ;                                    txt_normal_wallet_balance.setText(count_text);                               //     AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                                }                            } else {                                AppUtils.alertDialog(CheckoutToPay_Activity.this, jsonObject.getString("Message"));                            }                        } catch (Exception e) {                            e.printStackTrace();                      //      AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);                        }                    }                }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);            }        } catch (Exception e) {            e.printStackTrace();          //  AppUtils.showExceptionDialog(CheckoutToPay_Activity.this);        }    }}