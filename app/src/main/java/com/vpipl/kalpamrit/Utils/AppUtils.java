package com.vpipl.kalpamrit.Utils;import android.animation.ObjectAnimator;import android.app.Activity;import android.app.ActivityManager;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.PorterDuff;import android.graphics.drawable.Drawable;import android.media.ExifInterface;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Environment;import android.provider.MediaStore;import android.support.v4.content.FileProvider;import android.support.v7.app.ActionBar;import android.text.Html;import android.text.format.DateFormat;import android.util.Base64;import android.util.Log;import android.view.View;import android.view.Window;import android.view.inputmethod.InputMethodManager;import android.widget.ImageView;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.animation.ViewPropertyAnimation;import com.vpipl.kalpamrit.AppController;import com.vpipl.kalpamrit.BuildConfig;import com.vpipl.kalpamrit.DashBoard_Activity;import com.vpipl.kalpamrit.Login_Activity;import com.vpipl.kalpamrit.R;import com.vpipl.kalpamrit.Register_Activity;import org.apache.commons.lang3.text.WordUtils;import org.apache.http.HttpResponse;import org.apache.http.HttpVersion;import org.apache.http.NameValuePair;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import java.io.BufferedReader;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStreamReader;import java.security.KeyStore;import java.security.SecureRandom;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Created by admin on 29-04-2017. */public class AppUtils {    private static final String IMAGE_DIRECTORY_NAME = "Kalpamrit";    private static final int MEDIA_TYPE_IMAGE = 1;    public static boolean showLogs = true;    public static String lastCompressedImageFileName = "";    public static String mPANPattern = "[A-Z]{5}[0-9]{4}[A-Z]{1}";    public static String mPINCodePattern = "^[1-9][0-9]{5}$";    private static ProgressDialog progressDialog;    /*        <!--Live URL string-->    <string name="serviceAPIURL">https://kalpamritmarketing.com/webservice/service.asmx/</string>    <string name="ViewgenealogyURL">https://kalpamritmarketing.com/admin/AppBinaryTree.aspx?formNo=</string>    <string name="ViewincentiveURL">https://kalpamritmarketing.com/dashboard/MonthlyStatement.aspx?PNo=</string>    <string name="productImageURL">https://kalpamritmarketing.com/</string>    <string name="InvoicePrint">https://kalpamritmarketing.com/FranchiseePanel/GST_PartyBill.aspx?OrderNo=</string>*/    private static String serviceAPIURL = "https://kalpamritmarketing.com/webservice/service.asmx/";   // private static String serviceAPIURL = "http://192.168.2.130:261/Service.asmx/";    private static String ViewgenealogyURL = "https://kalpamritmarketing.com/admin/AppBinaryTree.aspx?formNo=";    private static String ViewincentiveURL = "https://kalpamritmarketing.com/dashboard/MonthlyStatement.aspx?PNo=";    private static String productImageURL = "https://kalpamritmarketing.com/";    private static String InvoicePrint = "https://kalpamritmarketing.com/FranchiseePanel/GST_PartyBill.aspx?OrderNo=";    public static String serviceAPIURL() {        return (serviceAPIURL);    }    public static String ViewgenealogyURL() {        return (ViewgenealogyURL);    }    public static String ViewincentiveURL() {        return (ViewincentiveURL);    }    public static String productImageURL() {        return (productImageURL);    }    public static String InvoicePrint() {        return (InvoicePrint);    }    public static void hideKeyboardOnClick(Context con, View view) {        try {            InputMethodManager inputManager = (InputMethodManager) con.getSystemService(Context.INPUT_METHOD_SERVICE);            inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(con);        }    }    public static void loadProductImage(Context conn, String imageURL, ImageView imageView) {        try {            if (imageURL.equals("") && imageURL.isEmpty()) {                imageURL = "http://kalpamrit.versatileitsolution.com/design_img/kalpamrit.png";            }            Glide.with(conn)                    .load(imageURL)                    .placeholder(R.drawable.ic_no_image)                    .error(R.drawable.ic_no_image)                    .fallback(R.drawable.ic_no_image)                    .skipMemoryCache(false)                    .diskCacheStrategy(DiskCacheStrategy.ALL)                    .animate(getAnimatorImageLoading())                    .into(imageView);        } catch (Exception e) {            e.printStackTrace();        }    }    public static String CapsFirstLetterString(String string) {        return WordUtils.capitalizeFully(string);    }    public static void loadSlidingImage(Context conn, String imageURL, ImageView imageView) {        try {            Glide.with(conn)                    .load(imageURL)                    .placeholder(R.drawable.ic_no_image)                    .error(R.drawable.ic_no_image)                    .fallback(R.drawable.ic_no_image)                    .skipMemoryCache(false)                    .diskCacheStrategy(DiskCacheStrategy.ALL)                    .animate(getAnimatorImageLoading())                    .into(imageView);        } catch (Exception e) {            e.printStackTrace();        }    }    public static ViewPropertyAnimation.Animator getAnimatorImageLoading() {        ViewPropertyAnimation.Animator animationObject = null;        try {            animationObject = new ViewPropertyAnimation.Animator() {                @Override                public void animate(View view) {                    view.setAlpha(0f);                    ObjectAnimator fadeAnim = ObjectAnimator.ofFloat(view, "alpha", 0f, 1f);                    fadeAnim.setDuration(2500);                    fadeAnim.start();                }            };        } catch (Exception e) {            e.printStackTrace();        }        return animationObject;    }    public static String isNetworkWifiMobileData(Context context) {        String isType = "";        try {            ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();            if (networkInfo.getTypeName().equalsIgnoreCase("WIFI")) {                isType = "W";            } else if (networkInfo.getTypeName().equalsIgnoreCase("MOBILE")) {                isType = "M";            } else {                isType = "MW";            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }        return isType;    }    public static String getAppVersionName(Context context) {        PackageManager manager = context.getPackageManager();        String versionName = "";        try {            PackageInfo info = manager.getPackageInfo(context.getPackageName(), 0);            versionName = info.versionName;        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }        return versionName;    }    public static boolean isMyServiceRunning(Class<?> serviceClass, Context context) {        try {            ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);            for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {                if (serviceClass.getName().equals(service.service.getClassName())) {                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }        return false;    }    public static void showProgressDialog(Context conn) {        try {            if (progressDialog != null) {                if (!progressDialog.isShowing()) {                    if (!((Activity) conn).isFinishing()) {                        progressDialog.show();                    }                }            } else {                progressDialog = new ProgressDialog(conn);                progressDialog.setMessage("Please Wait...");                progressDialog.setTitle("Loading...");                progressDialog.setIndeterminate(true);                progressDialog.setCancelable(false);                progressDialog.setInverseBackgroundForced(false);                progressDialog.show();                if (!progressDialog.isShowing()) {                    // progressDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);                    progressDialog.show();                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static void showExceptionDialog(Context con) {        try {            AppUtils.dismissProgressDialog();            AppUtils.alertDialog(con, "Sorry, There seems to be some problem. Try again later");        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getDateFromAPIDate(String date) {        try {            if (AppUtils.showLogs) Log.v("getFormatDate", "before date.." + date);            Calendar cal = Calendar.getInstance(Locale.ENGLISH);            if (date.contains("/Date("))                cal.setTimeInMillis(Long.parseLong(date.replace("/Date(", "").replace(")/", "")));            else                cal.setTimeInMillis(Long.parseLong(date.replace("/date(", "").replace(")/", "")));            date = DateFormat.format("dd-MMM-yyyy", cal).toString().trim();            if (AppUtils.showLogs) Log.v("getFormatDate", "after date.." + date);        } catch (Exception e) {            e.printStackTrace();        }        return date;    }    public static String getFormatDate1(String date) {        try {            if (AppUtils.showLogs) Log.v("getFormatDate", "before date.." + date);            SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");            SimpleDateFormat outputFormat = new SimpleDateFormat("dd-MMM-yyyy");            date = outputFormat.format(inputFormat.parse(date));            if (AppUtils.showLogs) Log.v("getFormatDate", "after date.." + date);        } catch (Exception e) {            e.printStackTrace();        }        return date;    }    public static void alertDialogWithFinish(final Context context, String message) {        try {            final Dialog dialog = createDialog(context, true);            TextView dialog4all_txt = dialog.findViewById(R.id.txt_DialogTitle);            dialog4all_txt.setText(message);            dialog.findViewById(R.id.txt_submit).setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dialog.dismiss();                    //((Activity)context).//overridePendingTransition(R.anim.fade_in, R.anim.fade_out);                    ((Activity) context).finish();                }            });            dialog.show();        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }    }    public static void alertDialogWithFinishHome(final Context context, String message) {        try {            final Dialog dialog = createDialog(context, true);            TextView dialog4all_txt = dialog.findViewById(R.id.txt_DialogTitle);            dialog4all_txt.setText(message);            dialog.findViewById(R.id.txt_submit).setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dialog.dismiss();                    //((Activity)context).//overridePendingTransition(R.anim.fade_in, R.anim.fade_out);                    context.startActivity(new Intent(context , DashBoard_Activity.class));                    ((Activity) context).finish();                }            });            dialog.show();        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }    }    public static void dismissProgressDialog() {        try {            if (progressDialog != null) {                if (progressDialog.isShowing()) {                    progressDialog.dismiss();                    progressDialog = null;                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static void alertDialog(Context context, String message) {        try {            final Dialog dialog = createDialog(context, true);            TextView dialog4all_txt = dialog.findViewById(R.id.txt_DialogTitle);            dialog4all_txt.setText(message);            dialog.findViewById(R.id.txt_submit).setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    dialog.dismiss();                }            });            dialog.show();        } catch (Exception e) {            e.printStackTrace();        }    }    public static Uri getOutputMediaFileUri(int type, String PageName, Context context) {        // External sdcard location        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), IMAGE_DIRECTORY_NAME);        // Create the storage directory if it does not exist        if (!mediaStorageDir.exists()) {            if (!mediaStorageDir.mkdirs()) {                if (AppUtils.showLogs)                    Log.d(IMAGE_DIRECTORY_NAME, "Oops! Failed create " + IMAGE_DIRECTORY_NAME + " directory");                return null;            }        }        // Create a media file name        String time = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());        File mediaFile;        if (type == MEDIA_TYPE_IMAGE) {            mediaFile = new File(mediaStorageDir.getPath() + File.separator + "IMG_" + time + ".jpg");        } else {            return null;        }        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            return FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + ".provider", mediaFile);        } else {            return Uri.fromFile(mediaFile);        }    }    public static Dialog createDialog(Context context, boolean single) {        final Dialog dialog = new Dialog(context, R.style.ThemeDialogCustom);        dialog.getWindow().getAttributes().windowAnimations = R.style.dialog_animation;        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setCancelable(false);        if (single)            dialog.setContentView(R.layout.custom_dialog_one);        else            dialog.setContentView(R.layout.custom_dialog_two);        return dialog;    }    public static Bitmap getBitmapFromString(String imageString) {        Bitmap bitmap = null;        try {            byte[] byteArray = Base64.decode(imageString, Base64.DEFAULT);            bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);        } catch (Exception e) {            e.printStackTrace();        }        return bitmap;    }    public static String getPath(Uri uri, Context context) {        if (uri == null)            return null;        if (AppUtils.showLogs) Log.d("URI", uri + "");        String[] projection = {MediaStore.Images.Media.DATA};        Cursor cursor = context.getContentResolver().query(uri, projection, null, null, null);        if (cursor != null) {            int column_index = cursor                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);            cursor.moveToFirst();            String temp = cursor.getString(column_index);            cursor.close();            if (AppUtils.showLogs) Log.v("temp", "" + temp);            return temp;        } else            return null;    }    public static Bitmap compressImage(String filePath) {        Bitmap scaledBitmap = null;        BitmapFactory.Options options = new BitmapFactory.Options();//      by setting this field as true, the actual bitmap pixels are not loaded in the memory. Just the bounds are loaded. If//      you try the use the bitmap here, you will get null.        options.inJustDecodeBounds = true;        Bitmap bmp = BitmapFactory.decodeFile(filePath, options);        int actualHeight = options.outHeight;        int actualWidth = options.outWidth;//      max Height and width values of the compressed image is taken as 816x612        float maxHeight = 500.0f;        float maxWidth = 500.0f;        float imgRatio = actualWidth / actualHeight;        float maxRatio = maxWidth / maxHeight;//      width and height values are set maintaining the aspect ratio of the image        if (actualHeight > maxHeight || actualWidth > maxWidth) {            if (imgRatio < maxRatio) {                imgRatio = maxHeight / actualHeight;                actualWidth = (int) (imgRatio * actualWidth);                actualHeight = (int) maxHeight;            } else if (imgRatio > maxRatio) {                imgRatio = maxWidth / actualWidth;                actualHeight = (int) (imgRatio * actualHeight);                actualWidth = (int) maxWidth;            } else {                actualHeight = (int) maxHeight;                actualWidth = (int) maxWidth;            }        }//      setting inSampleSize value allows to load a scaled down version of the original image        options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);//      inJustDecodeBounds set to false to load the actual bitmap        options.inJustDecodeBounds = false;//      this options allow android to claim the bitmap memory if it runs low on memory        options.inPurgeable = true;        options.inInputShareable = true;        options.inTempStorage = new byte[16 * 1024];        try {//          load the bitmap from its path            bmp = BitmapFactory.decodeFile(filePath, options);        } catch (OutOfMemoryError exception) {            exception.printStackTrace();        }        try {            scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight, Bitmap.Config.ARGB_8888);        } catch (OutOfMemoryError exception) {            exception.printStackTrace();        }        float ratioX = actualWidth / (float) options.outWidth;        float ratioY = actualHeight / (float) options.outHeight;        float middleX = actualWidth / 2.0f;        float middleY = actualHeight / 2.0f;        Matrix scaleMatrix = new Matrix();        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);        Canvas canvas = new Canvas(scaledBitmap);        canvas.setMatrix(scaleMatrix);        canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));//      check the rotation of the image and display it properly        ExifInterface exif;        try {            exif = new ExifInterface(filePath);            int orientation = exif.getAttributeInt(                    ExifInterface.TAG_ORIENTATION, 0);            if (AppUtils.showLogs) Log.d("EXIF", "Exif: " + orientation);            Matrix matrix = new Matrix();            if (orientation == 6) {                matrix.postRotate(90);                if (AppUtils.showLogs) Log.d("EXIF", "Exif: " + orientation);            } else if (orientation == 3) {                matrix.postRotate(180);                if (AppUtils.showLogs) Log.d("EXIF", "Exif: " + orientation);            } else if (orientation == 8) {                matrix.postRotate(270);                if (AppUtils.showLogs) Log.d("EXIF", "Exif: " + orientation);            }            scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0,                    scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix,                    true);        } catch (IOException e) {            e.printStackTrace();        }        FileOutputStream out;        lastCompressedImageFileName = getFilename();        try {            out = new FileOutputStream(lastCompressedImageFileName);//          write the compressed bitmap at the destination specified by filename.            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 80, out);        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return scaledBitmap;    }    private static String getFilename() {        File file = new File(Environment.getExternalStorageDirectory().getPath(), "Kalpamrit");        if (!file.exists()) {            file.mkdirs();        }        return (file.getAbsolutePath() + "/" + System.currentTimeMillis() + ".jpg");    }    private static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {        final int height = options.outHeight;        final int width = options.outWidth;        int inSampleSize = 1;        if (height > reqHeight || width > reqWidth) {            final int heightRatio = Math.round((float) height / (float) reqHeight);            final int widthRatio = Math.round((float) width / (float) reqWidth);            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;        }        final float totalPixels = width * height;        final float totalReqPixelsCap = reqWidth * reqHeight * 2;        while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {            inSampleSize++;        }        return inSampleSize;    }    public static String getBase64StringFromBitmap(Bitmap bitmap) {        String imageString = "";        try {            if (bitmap != null) {                ByteArrayOutputStream stream = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.JPEG, 20, stream);                byte[] image = stream.toByteArray();                if (AppUtils.showLogs)                    Log.e("AppUtills", "Image Size after comress : " + image.length);                imageString = Base64.encodeToString(image, Base64.DEFAULT);            } else {                imageString = "";            }        } catch (Exception e) {            e.printStackTrace();        }        return imageString;    }    public static boolean isValidMail(String email) {        return !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();    }    public static boolean isNetworkAvailable(Context context) {        boolean connected = false;        try {            ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();            connected = networkInfo != null && networkInfo.isAvailable() && networkInfo.isConnected();            return connected;        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(context);        }        return connected;    }    public static HttpClient createHttpClient() {        try {            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());            trustStore.load(null, null);            MySSLSocketFactory sf = new MySSLSocketFactory(trustStore);            sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);            HttpParams params = new BasicHttpParams();            HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);            HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);            SchemeRegistry registry = new SchemeRegistry();            registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));            registry.register(new Scheme("https", sf, 443));            ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);            return new DefaultHttpClient(ccm, params);        } catch (Exception e) {            return new DefaultHttpClient();        }    }    public static String callWebServiceWithMultiParam(Context con, List<NameValuePair> postParameters, String methodName, String pageName) {        BufferedReader in = null;        try {            HttpClient client;            client = createHttpClient();            printQuery(pageName + " :: " + methodName, postParameters);            String result = null;            if (AppUtils.isNetworkAvailable(con)) {                if (AppUtils.showLogs)                    Log.e(pageName, "Executing URL..." + serviceAPIURL + methodName);                HttpPost request = new HttpPost(serviceAPIURL + methodName);                UrlEncodedFormEntity formEntity = null;                try {                    formEntity = new UrlEncodedFormEntity(postParameters);                } catch (Exception e) {                    e.printStackTrace();                }                request.setEntity(formEntity);                HttpResponse response = null;                try {                    response = client.execute(request);                } catch (Exception e) {                    e.printStackTrace();                }                try {                    in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));                } catch (Exception e) {                    e.printStackTrace();                }                StringBuilder sb = new StringBuilder();                String line;                String NL = System.getProperty("line.separator");                try {                    while ((line = in.readLine()) != null) {                        sb.append(line).append(NL);                    }                } catch (Exception e) {                    e.printStackTrace();                }                try {                    in.close();                } catch (Exception e) {                    e.printStackTrace();                }                try {                    if (AppUtils.showLogs)                        Log.e(pageName + "", "Response..." + methodName + "..... " + sb.toString().trim());                    result = sb.toString().trim();                } catch (Exception e) {                    e.printStackTrace();                }            } else {                AppUtils.alertDialog(con, con.getResources().getString(R.string.txt_networkAlert));            }            return result;        } finally {            if (in != null) {                try {                    in.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    public static void showDialogSignOut(final Context con) {        try {            final Dialog dialog = AppUtils.createDialog(con, false);            dialog.setCancelable(false);            TextView txt_DialogTitle = dialog.findViewById(R.id.txt_DialogTitle);            txt_DialogTitle.setText(Html.fromHtml(con.getResources().getString(R.string.txt_signout_message)));            TextView txt_submit = dialog.findViewById(R.id.txt_submit);            txt_submit.setText(con.getResources().getString(R.string.txt_signout_yes));            txt_submit.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try {                        dialog.dismiss();                        AppController.getSpUserInfo().edit().clear().commit();                        AppController.getSpIsLogin().edit().clear().commit();                        AppController.selectedProductsList.clear();                        Intent intent = new Intent(con, Login_Activity.class);                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);//                        intent.putExtra("SendToHome",true);                        con.startActivity(intent);                        ((Activity) con).finish();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            });            TextView txt_cancel = dialog.findViewById(R.id.txt_cancel);            txt_cancel.setText(con.getResources().getString(R.string.txt_signout_no));            txt_cancel.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    try {                        dialog.dismiss();                    } catch (Exception e) {                        e.printStackTrace();                    }                }            });            dialog.show();        } catch (Exception e) {            e.printStackTrace();            AppUtils.showExceptionDialog(con);        }    }    public static String generateRandomAlphaNumeric() {        SecureRandom rnd = new SecureRandom();        String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";        StringBuilder sb = new StringBuilder(10);        try {            for (int i = 0; i < 10; i++) {                sb.append(AB.charAt(rnd.nextInt(AB.length())));            }        } catch (Exception e) {            e.printStackTrace();        }        return sb.toString().trim();    }    public static void loadHomePageImage(Context conn, String imageURL, ImageView imageView) {        try {            Glide.with(conn)                    .load(imageURL)                    .skipMemoryCache(false)                    .diskCacheStrategy(DiskCacheStrategy.ALL)                    .into(imageView);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void printQuery(String pageName, List<NameValuePair> postParam) {        try {            String query = "";            for (int i = 0; i < postParam.size(); i++) {                query = query + " " + postParam.get(i).getName() + " : " + postParam.get(i).getValue();            }            if (AppUtils.showLogs) Log.e(pageName, "Executing Parameters..." + query);        } catch (Exception e) {            e.printStackTrace();        }    }    public static boolean isValidPassword(final String password) {        Pattern pattern;        Matcher matcher;        /*        * ^                 # start-of-string        (?=.*[0-9])       # a digit must occur at least once        (?=.*[a-z])       # a lower case letter must occur at least once        (?=.*[A-Z])       # an upper case letter must occur at least once        (?=.*[@#$%^&+=])  # a special character must occur at least once you can replace with your special characters        (?=\\S+$)          # no whitespace allowed in the entire string        .{4,}             # anything, at least six places though            $                 # end-of-string        * *///        Password should contain at least 1 digit , 1 lowercase,1 uppercase ,1 symbol *[@#$%^&+=!] , length atleast 8 digits        final String PASSWORD_PATTERN = "^(?=.*[0-9])(?=.*[A-Z])(?=.*[@#$%^&+=!])(?=\\S+$).{4,}$";        pattern = Pattern.compile(PASSWORD_PATTERN);        matcher = pattern.matcher(password);        return matcher.matches();    }}